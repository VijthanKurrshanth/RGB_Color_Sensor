
LDR_Sensing_Part_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000068e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000061a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800100  00800100  0000068e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000068e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000092b  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000711  00000000  00000000  0000107b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000442  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00001bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045d  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002bd  00000000  00000000  00002101  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000023be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 31       	cpi	r26, 0x11	; 17
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
  88:	0c 94 0b 03 	jmp	0x616	; 0x616 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <port_config>:
void port_config();


void port_config()
{
	DDRD |= (1<<PIND6) | (1<<PIND5) | (1<<PIND3); //configuring output pins of D
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	88 66       	ori	r24, 0x68	; 104
  94:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<PINB7) | (1<<PINB6) | (1<<PINB5) | (1<<PINB2); //configuring output pins of B
  96:	84 b1       	in	r24, 0x04	; 4
  98:	84 6e       	ori	r24, 0xE4	; 228
  9a:	84 b9       	out	0x04, r24	; 4
	PORTD |= (1<<PIND0) | (1<<PIND1) | (1<<PIND2); //configuring input pins of D
  9c:	8b b1       	in	r24, 0x0b	; 11
  9e:	87 60       	ori	r24, 0x07	; 7
  a0:	8b b9       	out	0x0b, r24	; 11
  a2:	08 95       	ret

000000a4 <set_adc>:
uint16_t ADC_O2; //variable to store value of lower 8 bits of converted digital output
uint16_t ADC_O; //variable to store value of complete 10 bits of converted digital output

void set_adc()
{
	ADMUX = 0x40; //configuring ADC multiplexer selection register //voltage reference - AVcc //analog channel - ADC0
  a4:	80 e4       	ldi	r24, 0x40	; 64
  a6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = 0xCF; //configuring ADC control and status register A //ADC enable & start conversion //interrupt enable //prescaler division factor - 128
  aa:	8f ec       	ldi	r24, 0xCF	; 207
  ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0x00; //configuring ADC control and status register B //free running mode
  b0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  b4:	08 95       	ret

000000b6 <__vector_21>:
	
}

ISR(ADC_vect) //interrupt service routine
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	2f 93       	push	r18
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	af 93       	push	r26
  c8:	bf 93       	push	r27
  ca:	ef 93       	push	r30
  cc:	ff 93       	push	r31
	ADC_O1 = ADCL; //storing lower 8 bits of converted digital output
  ce:	a8 e7       	ldi	r26, 0x78	; 120
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	8c 91       	ld	r24, X
  d4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <ADC_O1>
	ADC_O2 = ADCH; //storing higher 2 bits of converted digital output
  d8:	e9 e7       	ldi	r30, 0x79	; 121
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <ADC_O2+0x1>
  e4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ADC_O2>
	ADC_O = ADCL | ADCH << 8; //storing complete 10 bits of converted digital output
  e8:	2c 91       	ld	r18, X
  ea:	80 81       	ld	r24, Z
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	98 2f       	mov	r25, r24
  f0:	88 27       	eor	r24, r24
  f2:	82 2b       	or	r24, r18
  f4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <ADC_O+0x1>
  f8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <ADC_O>
	ADCSRA |= 0x40; //resetting ADC to next conversion
  fc:	ea e7       	ldi	r30, 0x7A	; 122
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 64       	ori	r24, 0x40	; 64
 104:	80 83       	st	Z, r24
}
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	bf 91       	pop	r27
 10c:	af 91       	pop	r26
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	2f 91       	pop	r18
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <voltage>:

uint16_t voltage()
{
	return ADC_O; //return value of complete 10 bits of converted digital output			
}
 11e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ADC_O>
 122:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <ADC_O+0x1>
 126:	08 95       	ret

00000128 <light>:
uint16_t blue_light_on = 0;


void light()
{
	if ((PIND & (1<<PIND2)) == 0) //detect input for red led
 128:	4a 99       	sbic	0x09, 2	; 9
 12a:	15 c0       	rjmp	.+42     	; 0x156 <light+0x2e>
	{
		PORTB |= (1<<PORTB5); //lighting red led
 12c:	85 b1       	in	r24, 0x05	; 5
 12e:	80 62       	ori	r24, 0x20	; 32
 130:	85 b9       	out	0x05, r24	; 5
		red_light_on = 1; //indicator for red led been lit
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <red_light_on+0x1>
 13a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <red_light_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	2f e3       	ldi	r18, 0x3F	; 63
 140:	8d e0       	ldi	r24, 0x0D	; 13
 142:	93 e0       	ldi	r25, 0x03	; 3
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <light+0x1c>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <light+0x26>
 14e:	00 00       	nop
		_delay_ms(1000); //led lighting time
		PORTB &= 0x0F; //resetting led (turn off)
 150:	85 b1       	in	r24, 0x05	; 5
 152:	8f 70       	andi	r24, 0x0F	; 15
 154:	85 b9       	out	0x05, r24	; 5
	}
		
	if ((PIND & (1<<PIND1)) ==0) //detect input for green led
 156:	49 99       	sbic	0x09, 1	; 9
 158:	15 c0       	rjmp	.+42     	; 0x184 <light+0x5c>
	{
		PORTB |= (1<<PORTB6); //lighting green led
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	85 b9       	out	0x05, r24	; 5
		green_light_on = 1; //indicator for green led been lit
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <green_light_on+0x1>
 168:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <green_light_on>
 16c:	2f e3       	ldi	r18, 0x3F	; 63
 16e:	8d e0       	ldi	r24, 0x0D	; 13
 170:	93 e0       	ldi	r25, 0x03	; 3
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <light+0x4a>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <light+0x54>
 17c:	00 00       	nop
		_delay_ms(1000); //led lighting time
		PORTB &= 0x0F; //resetting led (turn off)
 17e:	85 b1       	in	r24, 0x05	; 5
 180:	8f 70       	andi	r24, 0x0F	; 15
 182:	85 b9       	out	0x05, r24	; 5
	}
	
	if ((PIND & (1<<PIND0)) ==0) //detect input for blue led
 184:	48 99       	sbic	0x09, 0	; 9
 186:	15 c0       	rjmp	.+42     	; 0x1b2 <light+0x8a>
	{
		PORTB |= (1<<PORTB7);
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	80 68       	ori	r24, 0x80	; 128
 18c:	85 b9       	out	0x05, r24	; 5
		blue_light_on = 1; //indicator for blue led been lit
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <blue_light_on+0x1>
 196:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <blue_light_on>
 19a:	2f e3       	ldi	r18, 0x3F	; 63
 19c:	8d e0       	ldi	r24, 0x0D	; 13
 19e:	93 e0       	ldi	r25, 0x03	; 3
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <light+0x78>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <light+0x82>
 1aa:	00 00       	nop
		_delay_ms(1000); //led lighting time
		PORTB &= 0x0F; //resetting led (turn off)
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	85 b9       	out	0x05, r24	; 5
 1b2:	08 95       	ret

000001b4 <output>:
#include "light_on.h"
#include "config.h"

int output()
{
	uint16_t volt = voltage(); //get the current voltage value in digital form
 1b4:	0e 94 8f 00 	call	0x11e	; 0x11e <voltage>
	volt = volt / 1023.0 * 255.0; //calculating the pwm duty cycle according to the voltage
 1b8:	bc 01       	movw	r22, r24
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 10 02 	call	0x420	; 0x420 <__floatunsisf>
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	30 ec       	ldi	r19, 0xC0	; 192
 1c6:	4f e7       	ldi	r20, 0x7F	; 127
 1c8:	54 e4       	ldi	r21, 0x44	; 68
 1ca:	0e 94 6f 01 	call	0x2de	; 0x2de <__divsf3>
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	4f e7       	ldi	r20, 0x7F	; 127
 1d4:	53 e4       	ldi	r21, 0x43	; 67
 1d6:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
 1da:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__fixunssfsi>
	return volt;	
}
 1de:	cb 01       	movw	r24, r22
 1e0:	08 95       	ret

000001e2 <main>:
uint16_t voltR = 0;
uint16_t voltG = 0;
uint16_t voltB = 0;

int main(void)
{
 1e2:	ef 92       	push	r14
 1e4:	ff 92       	push	r15
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
	port_config(); //configure ports
 1ee:	0e 94 48 00 	call	0x90	; 0x90 <port_config>
	sei(); //enable global interrupts
 1f2:	78 94       	sei
	
	//variables to check whether the color is already sensed
	uint16_t sensed_r = 0; 
	uint16_t sensed_g = 0;
	uint16_t sensed_b = 0;
 1f4:	e1 2c       	mov	r14, r1
 1f6:	f1 2c       	mov	r15, r1
	port_config(); //configure ports
	sei(); //enable global interrupts
	
	//variables to check whether the color is already sensed
	uint16_t sensed_r = 0; 
	uint16_t sensed_g = 0;
 1f8:	00 e0       	ldi	r16, 0x00	; 0
 1fa:	10 e0       	ldi	r17, 0x00	; 0
{
	port_config(); //configure ports
	sei(); //enable global interrupts
	
	//variables to check whether the color is already sensed
	uint16_t sensed_r = 0; 
 1fc:	c0 e0       	ldi	r28, 0x00	; 0
 1fe:	d0 e0       	ldi	r29, 0x00	; 0
	uint16_t sensed_g = 0;
	uint16_t sensed_b = 0;
	
	while (1)
	{
		light(); //enabling to turn on led lights
 200:	0e 94 94 00 	call	0x128	; 0x128 <light>
		set_adc(); //initialize adc
 204:	0e 94 52 00 	call	0xa4	; 0xa4 <set_adc>
		
		if (red_light_on & ~sensed_r)
 208:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <red_light_on>
 20c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <red_light_on+0x1>
 210:	9e 01       	movw	r18, r28
 212:	20 95       	com	r18
 214:	30 95       	com	r19
 216:	82 23       	and	r24, r18
 218:	93 23       	and	r25, r19
 21a:	89 2b       	or	r24, r25
 21c:	41 f0       	breq	.+16     	; 0x22e <main+0x4c>
		{
			voltR = output(); //store ldr intensity of red led reflections
 21e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <output>
 222:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <voltR+0x1>
 226:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <voltR>
			sensed_r = 1;
 22a:	c1 e0       	ldi	r28, 0x01	; 1
 22c:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		if (green_light_on & ~sensed_g)
 22e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <green_light_on>
 232:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <green_light_on+0x1>
 236:	98 01       	movw	r18, r16
 238:	20 95       	com	r18
 23a:	30 95       	com	r19
 23c:	82 23       	and	r24, r18
 23e:	93 23       	and	r25, r19
 240:	89 2b       	or	r24, r25
 242:	41 f0       	breq	.+16     	; 0x254 <main+0x72>
		{
			voltG = output(); //store ldr intensity of green led reflections
 244:	0e 94 da 00 	call	0x1b4	; 0x1b4 <output>
 248:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <voltG+0x1>
 24c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <voltG>
			sensed_g = 1;
 250:	01 e0       	ldi	r16, 0x01	; 1
 252:	10 e0       	ldi	r17, 0x00	; 0
		}

		if (blue_light_on & ~sensed_b)
 254:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <blue_light_on>
 258:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <blue_light_on+0x1>
 25c:	97 01       	movw	r18, r14
 25e:	20 95       	com	r18
 260:	30 95       	com	r19
 262:	82 23       	and	r24, r18
 264:	93 23       	and	r25, r19
 266:	89 2b       	or	r24, r25
 268:	49 f0       	breq	.+18     	; 0x27c <main+0x9a>
		{
			voltB = output(); //store ldr intensity of blue led reflections
 26a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <output>
 26e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 272:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			sensed_b = 1;
 276:	ee 24       	eor	r14, r14
 278:	e3 94       	inc	r14
 27a:	f1 2c       	mov	r15, r1
		}
				
		if (sensed_r & sensed_g & sensed_b) //check whether all three intensities are sensed
 27c:	ce 01       	movw	r24, r28
 27e:	80 23       	and	r24, r16
 280:	91 23       	and	r25, r17
 282:	8e 21       	and	r24, r14
 284:	9f 21       	and	r25, r15
 286:	89 2b       	or	r24, r25
 288:	09 f4       	brne	.+2      	; 0x28c <main+0xaa>
 28a:	ba cf       	rjmp	.-140    	; 0x200 <main+0x1e>
			break; //break out of while loop
		}
	}
	
	//pwm signal output to the red input of rgb led
	OCR0A = voltR;
 28c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <voltR>
 290:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= (1<<COM0A1) | (1<<WGM01) | (1<<WGM00);	//Non-Inverting Fast PWM mode 7
 292:	84 b5       	in	r24, 0x24	; 36
 294:	83 68       	ori	r24, 0x83	; 131
 296:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00);	//No-Prescaler
 298:	85 b5       	in	r24, 0x25	; 37
 29a:	81 60       	ori	r24, 0x01	; 1
 29c:	85 bd       	out	0x25, r24	; 37
	
	//pwm signal output to the green input of rgb led
	OCR0B = voltG;
 29e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <voltG>
 2a2:	88 bd       	out	0x28, r24	; 40
	TCCR0A |= (1<<COM0B1) | (1<<WGM01) | (1<<WGM00);	//Non-Inverting Fast PWM mode 7
 2a4:	84 b5       	in	r24, 0x24	; 36
 2a6:	83 62       	ori	r24, 0x23	; 35
 2a8:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00);	//No-Prescaler
 2aa:	85 b5       	in	r24, 0x25	; 37
 2ac:	81 60       	ori	r24, 0x01	; 1
 2ae:	85 bd       	out	0x25, r24	; 37
	
	//pwm signal output to the blue input of rgb led
	OCR2B = voltB;
 2b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2b4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	TCCR2A |= (1<<COM2B1) | (1<<WGM21) | (1<<WGM20);	//Non-Inverting Fast PWM mode 7
 2b8:	e0 eb       	ldi	r30, 0xB0	; 176
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	83 62       	ori	r24, 0x23	; 35
 2c0:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS20);	//No-Prescaler
 2c2:	e1 eb       	ldi	r30, 0xB1	; 177
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	81 60       	ori	r24, 0x01	; 1
 2ca:	80 83       	st	Z, r24
}
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	ff 90       	pop	r15
 2da:	ef 90       	pop	r14
 2dc:	08 95       	ret

000002de <__divsf3>:
 2de:	0e 94 83 01 	call	0x306	; 0x306 <__divsf3x>
 2e2:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__fp_round>
 2e6:	0e 94 5d 02 	call	0x4ba	; 0x4ba <__fp_pscB>
 2ea:	58 f0       	brcs	.+22     	; 0x302 <__divsf3+0x24>
 2ec:	0e 94 56 02 	call	0x4ac	; 0x4ac <__fp_pscA>
 2f0:	40 f0       	brcs	.+16     	; 0x302 <__divsf3+0x24>
 2f2:	29 f4       	brne	.+10     	; 0x2fe <__divsf3+0x20>
 2f4:	5f 3f       	cpi	r21, 0xFF	; 255
 2f6:	29 f0       	breq	.+10     	; 0x302 <__divsf3+0x24>
 2f8:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__fp_inf>
 2fc:	51 11       	cpse	r21, r1
 2fe:	0c 94 98 02 	jmp	0x530	; 0x530 <__fp_szero>
 302:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_nan>

00000306 <__divsf3x>:
 306:	0e 94 75 02 	call	0x4ea	; 0x4ea <__fp_split3>
 30a:	68 f3       	brcs	.-38     	; 0x2e6 <__divsf3+0x8>

0000030c <__divsf3_pse>:
 30c:	99 23       	and	r25, r25
 30e:	b1 f3       	breq	.-20     	; 0x2fc <__divsf3+0x1e>
 310:	55 23       	and	r21, r21
 312:	91 f3       	breq	.-28     	; 0x2f8 <__divsf3+0x1a>
 314:	95 1b       	sub	r25, r21
 316:	55 0b       	sbc	r21, r21
 318:	bb 27       	eor	r27, r27
 31a:	aa 27       	eor	r26, r26
 31c:	62 17       	cp	r22, r18
 31e:	73 07       	cpc	r23, r19
 320:	84 07       	cpc	r24, r20
 322:	38 f0       	brcs	.+14     	; 0x332 <__divsf3_pse+0x26>
 324:	9f 5f       	subi	r25, 0xFF	; 255
 326:	5f 4f       	sbci	r21, 0xFF	; 255
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	44 1f       	adc	r20, r20
 32e:	aa 1f       	adc	r26, r26
 330:	a9 f3       	breq	.-22     	; 0x31c <__divsf3_pse+0x10>
 332:	35 d0       	rcall	.+106    	; 0x39e <__divsf3_pse+0x92>
 334:	0e 2e       	mov	r0, r30
 336:	3a f0       	brmi	.+14     	; 0x346 <__divsf3_pse+0x3a>
 338:	e0 e8       	ldi	r30, 0x80	; 128
 33a:	32 d0       	rcall	.+100    	; 0x3a0 <__divsf3_pse+0x94>
 33c:	91 50       	subi	r25, 0x01	; 1
 33e:	50 40       	sbci	r21, 0x00	; 0
 340:	e6 95       	lsr	r30
 342:	00 1c       	adc	r0, r0
 344:	ca f7       	brpl	.-14     	; 0x338 <__divsf3_pse+0x2c>
 346:	2b d0       	rcall	.+86     	; 0x39e <__divsf3_pse+0x92>
 348:	fe 2f       	mov	r31, r30
 34a:	29 d0       	rcall	.+82     	; 0x39e <__divsf3_pse+0x92>
 34c:	66 0f       	add	r22, r22
 34e:	77 1f       	adc	r23, r23
 350:	88 1f       	adc	r24, r24
 352:	bb 1f       	adc	r27, r27
 354:	26 17       	cp	r18, r22
 356:	37 07       	cpc	r19, r23
 358:	48 07       	cpc	r20, r24
 35a:	ab 07       	cpc	r26, r27
 35c:	b0 e8       	ldi	r27, 0x80	; 128
 35e:	09 f0       	breq	.+2      	; 0x362 <__divsf3_pse+0x56>
 360:	bb 0b       	sbc	r27, r27
 362:	80 2d       	mov	r24, r0
 364:	bf 01       	movw	r22, r30
 366:	ff 27       	eor	r31, r31
 368:	93 58       	subi	r25, 0x83	; 131
 36a:	5f 4f       	sbci	r21, 0xFF	; 255
 36c:	3a f0       	brmi	.+14     	; 0x37c <__divsf3_pse+0x70>
 36e:	9e 3f       	cpi	r25, 0xFE	; 254
 370:	51 05       	cpc	r21, r1
 372:	78 f0       	brcs	.+30     	; 0x392 <__divsf3_pse+0x86>
 374:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__fp_inf>
 378:	0c 94 98 02 	jmp	0x530	; 0x530 <__fp_szero>
 37c:	5f 3f       	cpi	r21, 0xFF	; 255
 37e:	e4 f3       	brlt	.-8      	; 0x378 <__divsf3_pse+0x6c>
 380:	98 3e       	cpi	r25, 0xE8	; 232
 382:	d4 f3       	brlt	.-12     	; 0x378 <__divsf3_pse+0x6c>
 384:	86 95       	lsr	r24
 386:	77 95       	ror	r23
 388:	67 95       	ror	r22
 38a:	b7 95       	ror	r27
 38c:	f7 95       	ror	r31
 38e:	9f 5f       	subi	r25, 0xFF	; 255
 390:	c9 f7       	brne	.-14     	; 0x384 <__divsf3_pse+0x78>
 392:	88 0f       	add	r24, r24
 394:	91 1d       	adc	r25, r1
 396:	96 95       	lsr	r25
 398:	87 95       	ror	r24
 39a:	97 f9       	bld	r25, 7
 39c:	08 95       	ret
 39e:	e1 e0       	ldi	r30, 0x01	; 1
 3a0:	66 0f       	add	r22, r22
 3a2:	77 1f       	adc	r23, r23
 3a4:	88 1f       	adc	r24, r24
 3a6:	bb 1f       	adc	r27, r27
 3a8:	62 17       	cp	r22, r18
 3aa:	73 07       	cpc	r23, r19
 3ac:	84 07       	cpc	r24, r20
 3ae:	ba 07       	cpc	r27, r26
 3b0:	20 f0       	brcs	.+8      	; 0x3ba <__divsf3_pse+0xae>
 3b2:	62 1b       	sub	r22, r18
 3b4:	73 0b       	sbc	r23, r19
 3b6:	84 0b       	sbc	r24, r20
 3b8:	ba 0b       	sbc	r27, r26
 3ba:	ee 1f       	adc	r30, r30
 3bc:	88 f7       	brcc	.-30     	; 0x3a0 <__divsf3_pse+0x94>
 3be:	e0 95       	com	r30
 3c0:	08 95       	ret

000003c2 <__fixunssfsi>:
 3c2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fp_splitA>
 3c6:	88 f0       	brcs	.+34     	; 0x3ea <__fixunssfsi+0x28>
 3c8:	9f 57       	subi	r25, 0x7F	; 127
 3ca:	98 f0       	brcs	.+38     	; 0x3f2 <__fixunssfsi+0x30>
 3cc:	b9 2f       	mov	r27, r25
 3ce:	99 27       	eor	r25, r25
 3d0:	b7 51       	subi	r27, 0x17	; 23
 3d2:	b0 f0       	brcs	.+44     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3d4:	e1 f0       	breq	.+56     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3d6:	66 0f       	add	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	88 1f       	adc	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	1a f0       	brmi	.+6      	; 0x3e6 <__fixunssfsi+0x24>
 3e0:	ba 95       	dec	r27
 3e2:	c9 f7       	brne	.-14     	; 0x3d6 <__fixunssfsi+0x14>
 3e4:	14 c0       	rjmp	.+40     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3e6:	b1 30       	cpi	r27, 0x01	; 1
 3e8:	91 f0       	breq	.+36     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3ea:	0e 94 97 02 	call	0x52e	; 0x52e <__fp_zero>
 3ee:	b1 e0       	ldi	r27, 0x01	; 1
 3f0:	08 95       	ret
 3f2:	0c 94 97 02 	jmp	0x52e	; 0x52e <__fp_zero>
 3f6:	67 2f       	mov	r22, r23
 3f8:	78 2f       	mov	r23, r24
 3fa:	88 27       	eor	r24, r24
 3fc:	b8 5f       	subi	r27, 0xF8	; 248
 3fe:	39 f0       	breq	.+14     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 400:	b9 3f       	cpi	r27, 0xF9	; 249
 402:	cc f3       	brlt	.-14     	; 0x3f6 <__fixunssfsi+0x34>
 404:	86 95       	lsr	r24
 406:	77 95       	ror	r23
 408:	67 95       	ror	r22
 40a:	b3 95       	inc	r27
 40c:	d9 f7       	brne	.-10     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40e:	3e f4       	brtc	.+14     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 410:	90 95       	com	r25
 412:	80 95       	com	r24
 414:	70 95       	com	r23
 416:	61 95       	neg	r22
 418:	7f 4f       	sbci	r23, 0xFF	; 255
 41a:	8f 4f       	sbci	r24, 0xFF	; 255
 41c:	9f 4f       	sbci	r25, 0xFF	; 255
 41e:	08 95       	ret

00000420 <__floatunsisf>:
 420:	e8 94       	clt
 422:	09 c0       	rjmp	.+18     	; 0x436 <__floatsisf+0x12>

00000424 <__floatsisf>:
 424:	97 fb       	bst	r25, 7
 426:	3e f4       	brtc	.+14     	; 0x436 <__floatsisf+0x12>
 428:	90 95       	com	r25
 42a:	80 95       	com	r24
 42c:	70 95       	com	r23
 42e:	61 95       	neg	r22
 430:	7f 4f       	sbci	r23, 0xFF	; 255
 432:	8f 4f       	sbci	r24, 0xFF	; 255
 434:	9f 4f       	sbci	r25, 0xFF	; 255
 436:	99 23       	and	r25, r25
 438:	a9 f0       	breq	.+42     	; 0x464 <__floatsisf+0x40>
 43a:	f9 2f       	mov	r31, r25
 43c:	96 e9       	ldi	r25, 0x96	; 150
 43e:	bb 27       	eor	r27, r27
 440:	93 95       	inc	r25
 442:	f6 95       	lsr	r31
 444:	87 95       	ror	r24
 446:	77 95       	ror	r23
 448:	67 95       	ror	r22
 44a:	b7 95       	ror	r27
 44c:	f1 11       	cpse	r31, r1
 44e:	f8 cf       	rjmp	.-16     	; 0x440 <__floatsisf+0x1c>
 450:	fa f4       	brpl	.+62     	; 0x490 <__floatsisf+0x6c>
 452:	bb 0f       	add	r27, r27
 454:	11 f4       	brne	.+4      	; 0x45a <__floatsisf+0x36>
 456:	60 ff       	sbrs	r22, 0
 458:	1b c0       	rjmp	.+54     	; 0x490 <__floatsisf+0x6c>
 45a:	6f 5f       	subi	r22, 0xFF	; 255
 45c:	7f 4f       	sbci	r23, 0xFF	; 255
 45e:	8f 4f       	sbci	r24, 0xFF	; 255
 460:	9f 4f       	sbci	r25, 0xFF	; 255
 462:	16 c0       	rjmp	.+44     	; 0x490 <__floatsisf+0x6c>
 464:	88 23       	and	r24, r24
 466:	11 f0       	breq	.+4      	; 0x46c <__floatsisf+0x48>
 468:	96 e9       	ldi	r25, 0x96	; 150
 46a:	11 c0       	rjmp	.+34     	; 0x48e <__floatsisf+0x6a>
 46c:	77 23       	and	r23, r23
 46e:	21 f0       	breq	.+8      	; 0x478 <__floatsisf+0x54>
 470:	9e e8       	ldi	r25, 0x8E	; 142
 472:	87 2f       	mov	r24, r23
 474:	76 2f       	mov	r23, r22
 476:	05 c0       	rjmp	.+10     	; 0x482 <__floatsisf+0x5e>
 478:	66 23       	and	r22, r22
 47a:	71 f0       	breq	.+28     	; 0x498 <__floatsisf+0x74>
 47c:	96 e8       	ldi	r25, 0x86	; 134
 47e:	86 2f       	mov	r24, r22
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	2a f0       	brmi	.+10     	; 0x490 <__floatsisf+0x6c>
 486:	9a 95       	dec	r25
 488:	66 0f       	add	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	88 1f       	adc	r24, r24
 48e:	da f7       	brpl	.-10     	; 0x486 <__floatsisf+0x62>
 490:	88 0f       	add	r24, r24
 492:	96 95       	lsr	r25
 494:	87 95       	ror	r24
 496:	97 f9       	bld	r25, 7
 498:	08 95       	ret

0000049a <__fp_inf>:
 49a:	97 f9       	bld	r25, 7
 49c:	9f 67       	ori	r25, 0x7F	; 127
 49e:	80 e8       	ldi	r24, 0x80	; 128
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	08 95       	ret

000004a6 <__fp_nan>:
 4a6:	9f ef       	ldi	r25, 0xFF	; 255
 4a8:	80 ec       	ldi	r24, 0xC0	; 192
 4aa:	08 95       	ret

000004ac <__fp_pscA>:
 4ac:	00 24       	eor	r0, r0
 4ae:	0a 94       	dec	r0
 4b0:	16 16       	cp	r1, r22
 4b2:	17 06       	cpc	r1, r23
 4b4:	18 06       	cpc	r1, r24
 4b6:	09 06       	cpc	r0, r25
 4b8:	08 95       	ret

000004ba <__fp_pscB>:
 4ba:	00 24       	eor	r0, r0
 4bc:	0a 94       	dec	r0
 4be:	12 16       	cp	r1, r18
 4c0:	13 06       	cpc	r1, r19
 4c2:	14 06       	cpc	r1, r20
 4c4:	05 06       	cpc	r0, r21
 4c6:	08 95       	ret

000004c8 <__fp_round>:
 4c8:	09 2e       	mov	r0, r25
 4ca:	03 94       	inc	r0
 4cc:	00 0c       	add	r0, r0
 4ce:	11 f4       	brne	.+4      	; 0x4d4 <__fp_round+0xc>
 4d0:	88 23       	and	r24, r24
 4d2:	52 f0       	brmi	.+20     	; 0x4e8 <__fp_round+0x20>
 4d4:	bb 0f       	add	r27, r27
 4d6:	40 f4       	brcc	.+16     	; 0x4e8 <__fp_round+0x20>
 4d8:	bf 2b       	or	r27, r31
 4da:	11 f4       	brne	.+4      	; 0x4e0 <__fp_round+0x18>
 4dc:	60 ff       	sbrs	r22, 0
 4de:	04 c0       	rjmp	.+8      	; 0x4e8 <__fp_round+0x20>
 4e0:	6f 5f       	subi	r22, 0xFF	; 255
 4e2:	7f 4f       	sbci	r23, 0xFF	; 255
 4e4:	8f 4f       	sbci	r24, 0xFF	; 255
 4e6:	9f 4f       	sbci	r25, 0xFF	; 255
 4e8:	08 95       	ret

000004ea <__fp_split3>:
 4ea:	57 fd       	sbrc	r21, 7
 4ec:	90 58       	subi	r25, 0x80	; 128
 4ee:	44 0f       	add	r20, r20
 4f0:	55 1f       	adc	r21, r21
 4f2:	59 f0       	breq	.+22     	; 0x50a <__fp_splitA+0x10>
 4f4:	5f 3f       	cpi	r21, 0xFF	; 255
 4f6:	71 f0       	breq	.+28     	; 0x514 <__fp_splitA+0x1a>
 4f8:	47 95       	ror	r20

000004fa <__fp_splitA>:
 4fa:	88 0f       	add	r24, r24
 4fc:	97 fb       	bst	r25, 7
 4fe:	99 1f       	adc	r25, r25
 500:	61 f0       	breq	.+24     	; 0x51a <__fp_splitA+0x20>
 502:	9f 3f       	cpi	r25, 0xFF	; 255
 504:	79 f0       	breq	.+30     	; 0x524 <__fp_splitA+0x2a>
 506:	87 95       	ror	r24
 508:	08 95       	ret
 50a:	12 16       	cp	r1, r18
 50c:	13 06       	cpc	r1, r19
 50e:	14 06       	cpc	r1, r20
 510:	55 1f       	adc	r21, r21
 512:	f2 cf       	rjmp	.-28     	; 0x4f8 <__fp_split3+0xe>
 514:	46 95       	lsr	r20
 516:	f1 df       	rcall	.-30     	; 0x4fa <__fp_splitA>
 518:	08 c0       	rjmp	.+16     	; 0x52a <__fp_splitA+0x30>
 51a:	16 16       	cp	r1, r22
 51c:	17 06       	cpc	r1, r23
 51e:	18 06       	cpc	r1, r24
 520:	99 1f       	adc	r25, r25
 522:	f1 cf       	rjmp	.-30     	; 0x506 <__fp_splitA+0xc>
 524:	86 95       	lsr	r24
 526:	71 05       	cpc	r23, r1
 528:	61 05       	cpc	r22, r1
 52a:	08 94       	sec
 52c:	08 95       	ret

0000052e <__fp_zero>:
 52e:	e8 94       	clt

00000530 <__fp_szero>:
 530:	bb 27       	eor	r27, r27
 532:	66 27       	eor	r22, r22
 534:	77 27       	eor	r23, r23
 536:	cb 01       	movw	r24, r22
 538:	97 f9       	bld	r25, 7
 53a:	08 95       	ret

0000053c <__mulsf3>:
 53c:	0e 94 b1 02 	call	0x562	; 0x562 <__mulsf3x>
 540:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__fp_round>
 544:	0e 94 56 02 	call	0x4ac	; 0x4ac <__fp_pscA>
 548:	38 f0       	brcs	.+14     	; 0x558 <__mulsf3+0x1c>
 54a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <__fp_pscB>
 54e:	20 f0       	brcs	.+8      	; 0x558 <__mulsf3+0x1c>
 550:	95 23       	and	r25, r21
 552:	11 f0       	breq	.+4      	; 0x558 <__mulsf3+0x1c>
 554:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__fp_inf>
 558:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_nan>
 55c:	11 24       	eor	r1, r1
 55e:	0c 94 98 02 	jmp	0x530	; 0x530 <__fp_szero>

00000562 <__mulsf3x>:
 562:	0e 94 75 02 	call	0x4ea	; 0x4ea <__fp_split3>
 566:	70 f3       	brcs	.-36     	; 0x544 <__mulsf3+0x8>

00000568 <__mulsf3_pse>:
 568:	95 9f       	mul	r25, r21
 56a:	c1 f3       	breq	.-16     	; 0x55c <__mulsf3+0x20>
 56c:	95 0f       	add	r25, r21
 56e:	50 e0       	ldi	r21, 0x00	; 0
 570:	55 1f       	adc	r21, r21
 572:	62 9f       	mul	r22, r18
 574:	f0 01       	movw	r30, r0
 576:	72 9f       	mul	r23, r18
 578:	bb 27       	eor	r27, r27
 57a:	f0 0d       	add	r31, r0
 57c:	b1 1d       	adc	r27, r1
 57e:	63 9f       	mul	r22, r19
 580:	aa 27       	eor	r26, r26
 582:	f0 0d       	add	r31, r0
 584:	b1 1d       	adc	r27, r1
 586:	aa 1f       	adc	r26, r26
 588:	64 9f       	mul	r22, r20
 58a:	66 27       	eor	r22, r22
 58c:	b0 0d       	add	r27, r0
 58e:	a1 1d       	adc	r26, r1
 590:	66 1f       	adc	r22, r22
 592:	82 9f       	mul	r24, r18
 594:	22 27       	eor	r18, r18
 596:	b0 0d       	add	r27, r0
 598:	a1 1d       	adc	r26, r1
 59a:	62 1f       	adc	r22, r18
 59c:	73 9f       	mul	r23, r19
 59e:	b0 0d       	add	r27, r0
 5a0:	a1 1d       	adc	r26, r1
 5a2:	62 1f       	adc	r22, r18
 5a4:	83 9f       	mul	r24, r19
 5a6:	a0 0d       	add	r26, r0
 5a8:	61 1d       	adc	r22, r1
 5aa:	22 1f       	adc	r18, r18
 5ac:	74 9f       	mul	r23, r20
 5ae:	33 27       	eor	r19, r19
 5b0:	a0 0d       	add	r26, r0
 5b2:	61 1d       	adc	r22, r1
 5b4:	23 1f       	adc	r18, r19
 5b6:	84 9f       	mul	r24, r20
 5b8:	60 0d       	add	r22, r0
 5ba:	21 1d       	adc	r18, r1
 5bc:	82 2f       	mov	r24, r18
 5be:	76 2f       	mov	r23, r22
 5c0:	6a 2f       	mov	r22, r26
 5c2:	11 24       	eor	r1, r1
 5c4:	9f 57       	subi	r25, 0x7F	; 127
 5c6:	50 40       	sbci	r21, 0x00	; 0
 5c8:	9a f0       	brmi	.+38     	; 0x5f0 <__mulsf3_pse+0x88>
 5ca:	f1 f0       	breq	.+60     	; 0x608 <__mulsf3_pse+0xa0>
 5cc:	88 23       	and	r24, r24
 5ce:	4a f0       	brmi	.+18     	; 0x5e2 <__mulsf3_pse+0x7a>
 5d0:	ee 0f       	add	r30, r30
 5d2:	ff 1f       	adc	r31, r31
 5d4:	bb 1f       	adc	r27, r27
 5d6:	66 1f       	adc	r22, r22
 5d8:	77 1f       	adc	r23, r23
 5da:	88 1f       	adc	r24, r24
 5dc:	91 50       	subi	r25, 0x01	; 1
 5de:	50 40       	sbci	r21, 0x00	; 0
 5e0:	a9 f7       	brne	.-22     	; 0x5cc <__mulsf3_pse+0x64>
 5e2:	9e 3f       	cpi	r25, 0xFE	; 254
 5e4:	51 05       	cpc	r21, r1
 5e6:	80 f0       	brcs	.+32     	; 0x608 <__mulsf3_pse+0xa0>
 5e8:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__fp_inf>
 5ec:	0c 94 98 02 	jmp	0x530	; 0x530 <__fp_szero>
 5f0:	5f 3f       	cpi	r21, 0xFF	; 255
 5f2:	e4 f3       	brlt	.-8      	; 0x5ec <__mulsf3_pse+0x84>
 5f4:	98 3e       	cpi	r25, 0xE8	; 232
 5f6:	d4 f3       	brlt	.-12     	; 0x5ec <__mulsf3_pse+0x84>
 5f8:	86 95       	lsr	r24
 5fa:	77 95       	ror	r23
 5fc:	67 95       	ror	r22
 5fe:	b7 95       	ror	r27
 600:	f7 95       	ror	r31
 602:	e7 95       	ror	r30
 604:	9f 5f       	subi	r25, 0xFF	; 255
 606:	c1 f7       	brne	.-16     	; 0x5f8 <__mulsf3_pse+0x90>
 608:	fe 2b       	or	r31, r30
 60a:	88 0f       	add	r24, r24
 60c:	91 1d       	adc	r25, r1
 60e:	96 95       	lsr	r25
 610:	87 95       	ror	r24
 612:	97 f9       	bld	r25, 7
 614:	08 95       	ret

00000616 <_exit>:
 616:	f8 94       	cli

00000618 <__stop_program>:
 618:	ff cf       	rjmp	.-2      	; 0x618 <__stop_program>
